---

info:
  title: Lifecycle Visualization
  description: 
    body: This is an opinionated visual and accompanying outline to help demonstrate what a complete digital product can be when you adopt an API-first strategy, providing a common approach to defining the API lifecycle, governance, tooling, and which roles are needed to move APIs forward.
    tip: This is one approach to delivering a consistent API across a common lifecycle while considering governance, and the roles in place. This blueprint will not reflect the needs of every organiation, but provides a nice template to consider as you are building your own strategy.
  type: 
    body: HTTP / Web / REST API
    tip: This lifecycle has been validated against existing web APIs, providing your most simplest, but also most broad approach to how you can do APIs.
  approach: 
    body: Design-Led
    tip: This blueprint is opinionated about following a desig-led approach to delivering an API, iterating on the contract amongst stakeholders before any code gets written.
  visibility:
    body: Public
    tip: This is a blueprint for a publicly available API, and we should take into consideration what happens when anyone around the world can access.
  maturity:
    body: Production
    tip: This blueprint is meant to cover the needs of an API in production, requiring the most comprehensive quality, security, and governance.
  lifecycle:
    image: producer-consumer-lifecycle.png
    tip: Forward motion with any API requires a balanced relationship between the API producer and the consumer, let's stand this lifecycle on its side and walk through all of the elements.
# Producer Lifecycle
producer:
  - name: Define
    tip: text
    type: business
    elements:
      - name: Domains
        tip: text
        text: What domain will an API be operating in? Define the vocabulary, standards, and other patterns that developers at design and development teams will use.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:
          three:
          four:
      - name: Regions
        tip: text
        text: Identify the region(s) where an API will operate so that you can comply with regulations and other business requirements and ensure that APIs are as close to consumers as possible.
        tools:
          one: 
            name: AWS API Gateway
            description: Using AWS API Gateway to deploy APIs into different regions around the world.
            link: https://aws.amazon.com/api-gateway/
          two:
          three:
          four:      
      - name: Requirements
        tip: text
        text: What are the requirements for the API?  You need to define the business value it will bring to help you guide development and operation.
        tools:
          one:  
            name: Github
            description: Leveraging the Github README to outline the tenchincal and business requirements.
            link: https://github.com
          two:
          three:
          four:      
      - name: Workspaces
        tip: text
        text: Set up the workspaces where teams will be designing, developing, and managing APIs, then iterating upon them and managing multiple versions.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Source
        tip: text
        text: Ensuring that every API is using source control and has a repository for managing code, but also API artifacts, and other elements needed to manage the API lifecycle.
        tools:
          one:  
            name: Github
            description: Setting up a GitHub repository within the organization for the enterprise, domain, or team, providing a place for the API source of truth.
            link: https://github.com
          two:
          three:
          four:      
      - name: Teams
        tip: text
        text: Line up who will be working on an API, bringing together designers, developers, technical writers, QA specialists, and other roles who will be involved in moving your APIs forward.
        tools:
          one: 
            name: Postman
            description: Postman provides the ability to manage API teams, organizing API operations acros domain and teams.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Stakeholders
        tip: text
        text: Identify business and technical stakeholders, including any external partners and consumers who might need to be involved.
        tools:
          one: 
            name: Postman
            description: Private, partner, and public networks and workspaces open up the ability to work with all stakeholders for an API.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Design
    tip: text
    type: business
    elements:
      - name: Source
        tip: text
        text: Using source control to manage the artifacts involved with the API design process, providing a single source of truth that grounds design across teams.
        tools:
          one:  
            name: Github
            description: Cloning and syncing with the GitHub repository, keeping all API contracts as part of source control for use across the lifecycle.
            link: https://example.com
          two:
          three:
          four:      
      - name: Contracts
        tip: text
        text: Put contracts like OpenAPI and AsyncAPI to work in defining the surface area of each API, providing a machine-readable contract to guide teamsâ€™ work.
        tools:
          one: 
            name: Postman
            description: The Postman API builder allows you to manage the contracts you are designing as part of delivering APIs.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: The OpenAPI specification is used to provide a contract that guides, and defines the design of this HTTP / Web / REST API being developed.
            link: https://example.com
          three:
          four:      
      - name: Schema
        tip: text
        text: Establish a schema for all of the objects used as part of requests, responses, publishing, and subscribing when integrating an API into applications.
        tools:
          one: 
            name: Postman
            description: In API builder you can manage the JSON Schema via OpenAPI contracts used for APIs, or simply used to manage the schema using the domain pattern.
            link: https://postman.com
          two:  
            name: JSON Schema
            description: The JSON Schema specification is used to define the models applied in API requests and responses, allowing them to be validated.
            link: https://example.com
          three:
          four:      
      - name: Reference
        tip: text
        text: Generating reference documentation using the API contract, providing a complete set of documentation for everything that is possible with an API.
        tools:
          one: 
            name: Postman
            description: Postman is used to generate the reference documentation from the OpenAPI contract, keeping a complete reference available for each API.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: The OpenAPI specification is used as the source of truth for reference documentation, allowing it to be autogenerated as needed.
            link: https://example.com
          three:
            name: Collection
            description: The Postman collectioni is used as a generated, portable, and sharable set of reference documentation for each API being developed.
            link: https://example.com          
          four:      
      - name: Mocks
        tip: text
        text: Generate a mock representation of an API using its contract, providing an example of what the API will do in production. That will help with the design process and later on, with onboarding.
        tools: 
          one: 
            name: Postman
            description: You can use Postman to generate mock servers, leveraging the OpenAPI as the source of truth, and collectionis as derivative of the truth.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: The OpenAPI specification is used as the source of truth for mock servers, allowing it to be autogenerated as needed.
            link: https://openapis.org     
          three:            
            name: Collection
            description: postman collections are used as a container for each mocked representation, providing portable and sharable virtualized instances of an API.
            link: https://postman.com          
          four:      
      - name: Variables
        tip: text
        text: Variables should be used to abstract away commpon patterns and secrets that are used across reference document, mock servers, and eventually API testing.
        tools:
          one: 
            name: Postman
            description: You can develop and apply different scopes of variables using Postman, which can be applied across the API lifecycle across environments.
            link: https://postman.com
          two:  
            name: Collection
            description: Postman collections can utilize global, collection, and environment variables to apply common values and secrets where APIs are being used.
            link: https://example.com
          three:
          four:      
      - name: Environments  
        tip: text
        text: Environments allow development, staging, production, and other environments needed to develop and deliver APIs in a machine readable and executable way.
        tools:
          one: 
            name: Postman
            description: Postman environments are used to define the environments teams will use to deliver APIs, standardizing them across APIs being produced.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Develop
    tip: text
    type: technical
    elements:
      - name: Source
        tip: text
        text: The source control repository is cloned locally, providing access to artifacts that are produced as part of the API design process to develop API.
        tools:
          one:  
            name: Github
            description: The GitHub repository is used to keep API artifacts synced, so that they can be used throughout the development process.
            link: https://github.com
          two:
          three:
          four:      
      - name: IDE
        tip: text
        text: An integrated development environment is used to develop the code and other artifacts that will be used as part of deploying each API.
        tools:
          one:  
            name: Visual Studio
            description: VSCode is used to develop the code and artifacts behind each API, cloning the repository used as the source of truth.
            link: https://code.visualstudio.com/
          two:
          three:
          four:      
      - name: CLI
        tip: text
        text: A Command Line Interface (CLI) can be used as part of local development, making Postman artifacts and capability as part of the development process.
        tools:
          one: 
            name: Postman
            description: The Postman CLI is used as part of the development process, making the platform available locally.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Server
        tip: text
        text: Establish a baseline for the underlying API compute, choosing among virtual servers, containers, and serverless to power each API.
        tools:
          one:  
            name: AWS Lambda
            description: Using AWS Lambda as the serverless backend server for the API, providing scalable compute to power the API.
            link: https://aws.amazon.com/lambda/
          two:
          three:
          four:      
      - name: Gateway
        tip: text
        text: Set up the gateway to prepare for an API deployment. Do the initial work to set up everything needed at the gateway layer, shifting as much of this work as far to the left in the life cycle as possible.
        tools:
          one: 
            name: AWS API Gateway
            description: The AWS API Gateway is used for development, staging, and production APIs, providing a regional gateway for access each API.
            link: https://aws.amazon.com/api-gateway/
          two:
          three:
          four:        
  - name: Test
    tip: text
    type: technical
    elements:
      - name: Contract
        tip: text
        text: Use OpenAPI and AsyncAPI contracts to ensure that 100% of the surface area of an API is tested and behavior reflects the contract between producer and consumer.
        tools:
          one: 
            name: Postman
            description: Postman is used to test the contract for each API.
            link: https://postman.com
          two:  
            name: Collection
            description: Contract test collections are generated for testing aPIs.
            link: https://postman.com
          three:
          four:      
      - name: Performance
        tip: text
        text: Test specific paths for each API in multiple regions to make sure the API, gateway, and network provide the desired performance. 
        tools:
          one: 
            name: Postman
            description: Postman is used to test the performance of each API.
            link: https://postman.com
          two:  
            name: Collection
            description: Performance test collections are generated for testing APIs.
            link: https://postman.com
          three:
          four:      
      - name: Monitors  
        tip: text
        text: Schedule testing monitors to run on a schedule reflecting the business needs of the API, but also the type of test being run, allowing teams to automate testing.
        tools:
          one: 
            name: Postman
            description: Postman is used to generate monitors across the tests being automated.
            link: https://postman.com
          two:  
            name: Collection
            description: A monitor can be used to schedule the run of each test across regions.
            link: https://postman.com
          three:
          four:      
  - name: Secure
    tip: text
    type: technical
    elements:
      - name: Authentication
        tip: text
        text: Authentication helps ensure APIs are accessed only by those who should have access, allowing API producers and consumers to easily apply rules consistently.
        tools:
          one: 
            name: AWS API Gateway
            description: Using AWS API Gateway to deploy APIs into different regions around the world.
            link: https://aws.amazon.com/api-gateway/
          two:
          three:
          four:   
      - name: Authorization
        tip: text
        text: Once a user is authenticated, the authorization layer will make sure they only have access to approved resources. 
        tools:
          one: 
            name: AWS API Gateway
            description: Using AWS API Gateway to deploy APIs into different regions around the world.
            link: https://aws.amazon.com/api-gateway/
          two:
          three:
          four:              
      - name: Environments
        tip: text
        text: Have a solid map of the development, staging, and production environments across all APIs in operation. That will help you manage API deployment more consistently.
        tools:
          one: 
            name: Postman
            description: Postman environments are used to define and execute across development, staging, and production.
            link: https://postman.com
          two:
          three:
          four:      
      - name: RBAC  
        tip: text
        text: Role-based access controls should be applied at the authorization layer of an API and to the API operations around it, helping govern who has access to operations.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:
          three:
          four: 
      - name: Fuzzing
        tip: text
        text: Providing invalid, unexpected, or random data as inputs to an API as part of manual and automated testing, helping check for the most common vulnerabilities.
        tools:
          one: 
            name: Postman
            description: You can use Postman combined with network partners who offer API-driven fuzzing solutions.
            link: https://postman.com
          two:  
            name: Collection
            description: Fuzzing collections can be defined and used to test for common vulnerabilities across APis.
            link: https://example.com
          three:
          four:                
  - name: Deploy
    tip: text
    type: technical
    elements:    
      - name: Source
        tip: text
        text: Use source control to manage code and artifacts used to deploy an API, providing a single location where you can find everything behind each version, ideally with multiple branches to accommodate many API contributions.
        tools:
          one:  
            name: Github
            description: The GitHub repository is used as the source of truth when deploying each API.
            link: https://github.com
          two:
          three:
          four:      
      - name: Artifacts
        tip: text
        text: OpenAPI, JSON Schema, and collections are committed to the source control so that they can be used as part of the CI/CD pipelines, but also anywhere else across the API lifecycle.
        tools:
          one:  
            name: Github
            description: A folder is created within the GitHub repository for storing artifacts.
            link: https://github.com
          two:  
            name: OpenAPI
            description: OpenAPI contracts for each API are commited to the Github repository.
            link: https://example.com
          three:  
            name: Collection
            description: Collections for each API are commited to the Github repository.
            link: https://example.com
          four:  
            name: JSON Schema
            description: JSON Schema are published to the GitHub repository as part of OpenAPI contracts.
            link: https://example.com
      - name: CI/CD
        tip: text
        text: The pipeline ensures that the deployment of an API to each stage is as repeatable as possible, with tests and other essential needs of the API build process making API deployment as repeatable as possible across teams.
        tools:
          one:  
            name: Github
            description: GitHub actions are used to make the deployment of each API repeatable.
            link: https://github.com
          two:
          three:
          four:      
      - name: Environments
        tip: text
        text: Apply commonly managed environments, with a coordinated variable strategy for testing and automating configuration as part of the pipeline, helping to abstract away the technical details and secrets of API environments.
        tools:
          one: 
            name: Postman
            description: Staging and production environments are used as part of the CI/CD pipeline.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Server
        tip: text
        text: The CI/CD pipeline publishes the code behind each individual API operation, levering a serverless backend for this API, helping automate and scale the backend resources needed to power APIs.
        tools:
          one:  
            name: AWS Lambda
            description: AWS Lambda is leveraged to ensure the API is scalable, providing an elastic backend for each aPI.
            link: https://example.com
          two:
          three:
          four:      
      - name: Gateway
        tip: text
        text: Publish contracts, extensions, and other configurations to the API gateway, deploying an API into a staging, then a production environment if all tests pass in the pipeline. This gives you a repeatable way of managing gateways.
        tools:
          one: 
            name: AWS API Gateway
            description: AWS API Gateway is being used as the gateway for each API, ensuring deployment is automated.
            link: https://example.com
          two:
          three:
          four:      
      - name: Contract Test
        tip: text
        text: Contract tests are executed for staging and production environments, ensuring that the contract for each API is met in staging before it is published to production for consumers to use.
        tools:
          one: 
            name: Postman
            description: Postman is used to execute contract tests as part of the CI/CD pipeline.
            link: https://postman.com
          two:  
            name: Collection
            description: Contract test collections are executed within the CI/CD pipeline.
            link: https://postman.com
          three:
          four:      
      - name: Security Test  
        tip: text
        text: Security tests are executed for staging and production environments, ensuring that there are no vulnerabilities for each API is met in staging before it is published to production for consumers to use.
        tools:
          one: 
            name: Postman
            description: Postman is used to execute security tests as part of the CI/CD pipeline.
            link: https://postman.com
          two:  
            name: Collection
            description: Security test collections are executed within the CI/CD pipeline.
            link: https://postman.com
          three:
          four:      
  - name: Observe
    tip: text
    type: business
    elements:
      - name: Usage
        tip: text
        text: The usage of APIs by consumers is observable, leveraging the gateway to understand which APIs are accessed, how much consumers are using APIs, and what errors and other considerations are.
        tools:
          one: 
            name: AWS API Gateway
            description: Usage data is provided by the AWS API Gateway logging, helping define user access to APis.
            link: https://example.com
          two:
          three:
          four:      
      - name: Monitors
        tip: text
        text: Establish monitors for all contract, performance, security, and governance tests. These tests provide the results you need to understand the state of APIs and API operations. Use collections to define all of the outputs you need to understand the state of your APIs.
        tools:
          one: 
            name: Postman
            description: Postman monitors are used to observe each element of the producer lifecycle and routed into APM, messaging, CDNs, and other infrastructure.
            link: https://postman.com
          two:  
            name: Collection
            description: Collections are the executable unit of execution that can be used by each monitor to execute the desired business outcomes.
            link: https://example.com
          three:
          four:      
      - name: APM
        tip: text
        text: Route all outputs across API operations into your existing APM solutions, tapping every output across the API life cycle to understand the health and state of the platform through the infrastructure you have already invested in.
        tools:
          one:
            name: New Relic
            description: All monitors have the option to route run results into New Relic, providing dashboards for each API.
            link: https://example.com        
          two:
          three:
          four:      
      - name: Notifications
        tip: text
        text: Use notifications and alerts to observe changes with each API, as well as events that occur across the life cycle. They will help you understand consumer activity, as well as what is happening across teams and other stakeholders.
        tools:
          one: 
            name: Postman
            description: Notifications regarding regular API activity is made available via desktop, web, and email notifications.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Reports
        tip: text
        text: Provide team, API, documentation, testing, and other reporting, showing what teams are doing across API operations and how the lifecycle is unfolding across teams. Use native platform reporting that speaks specifically to API operations.
        tools:
          one: 
            name: Postman
            description: Postman provides a rich set of documentation for observing the usage and activity across aPis.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Watches
        tip: text
        text: API engagement can be observed using API and collectionw watches, tracking how API consumers are watching the APIs, documentation, mocks, testing, and other aspects of API operations.
        tools:
          one: 
            name: Postman
            description: All APIs and collections within Postman workspaces are able to be watched.
            link: https://postman.com
          two:
            name: OpenAPI
            description: OpenAPI contracts can be watched using API builder.
            link: https:/openapis.org
          three:
            name: Collection
            description: Postman collections can be watched within workspaces.
            link: https://postman.com
          four:      
      - name: Forks
        tip: text
        text: Any Postman collection can be forked by consumers, allowing documentation, mock servers, tests, and other types of collecitons to be forked and used as part of integration and automations.
        tools:
          one: 
            name: Postman
            description: Postman provides watch counts, and shows consumers who are watching for API producers.
            link: https://postman.com
          two:  
            name: Collection
            description: Each collection has a watch count, allowing consumers to engage with elements of API operations.
            link: https://postman.com
          three:
          four:      
      - name: Feedback  
        tip: text
        text: Feedback loops connecting API consumers with API producers allow teams to gather feedback about how well APIs are meeting the needs of consumers, providing valuable information that can be used to iterate upon each API.
        tools:
          one:  
            name: Github
            description: GitHub issues are used to gather and organize feedbback from consumers.
            link: https://github.com
          two:  
            name: OpenAPI
            description: Platform comment capabilities are used to gather feedback on OpenAPI.
            link: https://example.com
          three:
          four:   
            name: Collection
            description: postman comment capabilities are used to gather feedback on collections.
            link: https://example.com     
  - name: Distribute
    tip: text
    type: business
    elements:
      - name: Network
        tip: text
        text: APIs should be published to the private, partner, and public networks where API consumers are, via the platforms they are already using. Tap into existing network effects for API consumers so your developers can meet them where they already are.
        tools:
          one: 
            name: Postman
            description: Postman networks are used to distribute APIs to consumers.
            link: https://postman.com
          two:  
            name: Collection
            description: Collections help make onboarding with APIs via networks easier.
            link: https://example.com
          three:
          four:          
      - name: Portal
        tip: text
        text: An API deployed into production should be published to the central portal, providing centralized access for internal or external consumers through a single doorway that can be supported as part of overall API operations.
        tools:
          one: 
            name: Postman
            description: Postman networks are used to distribute APIs to consumers.
            link: https://postman.com
          two:  
            name: Collection
            description: Collections help make onboarding with APIs via networks easier.
            link: https://example.com
          three:
          four:    
      - name: Documentation
        tip: text
        text: Referencec documentation is published for the API, leveraging OpenAPI contracts to generate reference collections that provide a complete picture of what is possible for consumers.
        tools:
          one: 
            name: Postman
            description: Postman is used to generate and publish documentation.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: The OpenAPI is used as the source of truth for documentation.
            link: https://example.com
          three:
          four:  
            name: Collection
            description: Reference collections are used to publish all documentation.
            link: https://postman.com    
      - name: Client SDKs
        tip: text
        text: Generating client SDKs in a variety of programming languages, helping do the redundant work for your consumers when it comes to integration.
        tools:
          one: 
            name: Postman
            description: Postman is used to produce client snippets or SDKs.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: The OpenAPI contract can be used as code generation source.
            link: https://example.com
          three:
          four:  
            name: Collection
            description: Workflow collections can be used to produce SDKs.
            link: https://postman.com         
      - name: Buttons
        tip: text
        text: The documentation, tests, and workspace behind an API should be made available via blog posts, videos, wikis, and other resources to support APIs. Use embeddable and actionable buttons that consumers can activate with one click.
        tools:
          one: 
            name: Postman
            description: Postman is used to produce the HTML / JavaScript buttons.
            link: https://postman.com
          two:  
            name: Collection
            description: Buttons are associated with specific API collections.
            link: https://example.com
          three:
          four:      
      - name: Blog Post
        tip: text
        text: Each API should at least have one blog posts published, helping annouce the availablity of each API, ensuring that business and technical are made aware of the value that is available.
        tools:
          one: 
            name: Postman
            description: The Postman blog is used to publish blog posts to the community.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Video
        tip: text
        text: Each API should have at least one video that helps walk through documentation, onboarding, and using the API as part of workflows, applications, and integrations.
        tools:
          one:
            name: Youtube
            description: YouTube is used for publishing API videos and make available to consumers.
            link: https://youtube.com          
          two:
          three:
          four:      
      - name: Education
        tip: text
        text: Contracts, collections, blog posts, videos, and other sources should be made avalable via workspaces and repositories, helping ensure the required education for consumers is available.
        tools:
          one: 
            name: Postman
            description: The Postman blog is used to publish blog posts to the community.
            link: https://postman.com
          two:
          three:
          four:



# Roles involved in the lifecycle                
roles:
  - name: Define
    tip: text
    type: business
    elements:
      - name: Product Manager
        tip: text
        text: The product manager or owner is leading the definition of each API.
      - name: Software Architect
        tip: text
        text: Software architects are providing the support the product managers need.       
  - name: Design
    tip: text
    type: business
    elements:
      - name: Software Architect
        tip: text
        text: The software architect participates and helps guide the design process.
      - name: Product Manager
        tip: text
        text: Product managers participates in the design of each API product delivered.
      - name: Designer      
        tip: text
        text: The API designer is taking the lead on the design of each API delivered.
  - name: Develop
    tip: text
    type: technical
    elements:
      - name: Developers  
        tip: text
        text: A developer generally develops the backend for each API locally.
  - name: Test
    tip: text
    type: technical
    elements:
      - name:  Test Engineer 
        tip: text
        text: Test engineer and QA teams are brought into help ensure the quality of APIs.
  - name: Secure
    tip: text
    type: technical
    elements:
      - name: Information Security 
        tip: text
        text: InfoSec teams are brought in to help make sure all APIs delivered are secure.
  - name: Deploy
    tip: text
    type: technical
    elements:
      - name: Developers  
        tip: text
        text: Developers may play a role in deploying each API into some or all stages.   
      - name: Release Management 
        tip: text
        text: The release management team is tapped to actually move APIs into production.
  - name: Observe
    tip: text
    type: business
    elements:
      - name: Site reliability Engineering (SRE)
        tip: text
        text: SRE are brought into help mange the technical observability for each API.
      - name: DevOps
        tip: text
        text: DevOps teams are leveraged to help make the API lifecycle more observable.
      - name: Platform       
        tip: text
        text: PlatformOps teams are increasingly owning this stage of the API lifecycle.
  - name: Distribute 
    tip: text
    type: business
    elements:
      - name: Product Marketing
        tip: text
        text: Produc marketing teams are in charge of actually distributed APis.
      - name: Advocacy
        tip: text
        text: Dev relations and advocacy are leverage to bring attention to APis.

# Governance of API Operations
governance:
  - name: Define
    tip: text
    type: business
    elements:
      - name: Guidelines
        tip: text
        text: Human readable guidelines are crafted and made available, helping educate teams about policies and practices used across the API lifecycle.
        tools:
          one:  
            name: Github
            description: The README for the GitHub repository is used for publishing guidelines.
            link: https://github.com
          two:
          three:
          four:      
      - name: Rules
        tip: text
        text: Spectral rules are used to define the design, security, and other policies that are expected to be applied to APIs across the lifecycle.
        tools:
          one: 
            name: Postman
            description: Spectral rules are centrally defined as part of the Postman platform.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral rules are defined to drive automation of governance across the lifecycle.
          three:
          four:      
      - name: Standards
        tip: text
        text: Common standards are defined, providing templates that can be applied by designers and developers when it comes to delivering each API.
        tools:
          one: 
            name: Postman
            description: Standards can be defined as OpenAPI, and applied automatically using collections.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Design
    tip: text
    type: business
    elements:
      - name: Errors
        tip: text
        text: Erros ecountered when editing each API contract are reflected inline when designing an API, helping understand when mistakes are being made.
        tools:
          one: 
            name: Postman
            description: The API builder provides linting errors encountered when dsiging each API.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral rules are executing returning severe errors via API builder.
          three:
          four:      
      - name: Warning
        tip: text
        text: Warnings encountered when editing each API contract are reflected inline when designing an API, helping provide common warnings 
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral is used to lint contracts.
          three:
          four:      
      - name: Design Review
        tip: text
        text: Having a design review betwen developer, designer, architects, and product manager to help improve the design of the API, but also help improvie the policies, rules, and guidance provided as part of API governance.
        tools:
          one: 
            name: Postman
            description: Design reviews can exist within a workspace, either synchronously or asynchronosuly with all the stakeholders.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Develop
    tip: text
    type: business
    elements:  
      - name: Errors
        tip: text
        text: Developers should be able to lint their APIs locally as they desvelop, seeing the errors they are making in the design of an API in real time.
        tools:
          one: 
            name: Postman
            description: description: Postman on the desktop can be used to edit API contracts and return inline linting warnings triggered by Spectral rules.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral is used to lint contracts, and return errors.
          three:
          four:      
      - name: Warning       
        tip: text
        text: Developers should recceive warnings as part of their local development for the most common policies which are automated as part of rules.
        tools:
          one: 
            name: Postman
            description: Postman on the desktop can be used to edit API contracts and return inline linting warnings triggered by Spectral rules.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral is used to lint contracts, and return warnings.
          three:
          four:      
      - name: CLI
        tip: text
        text: Developers should have access to governance linting via the commadn line interface as they are developing APIs locally.
        tools:
          one: 
            name: Postman
            description:The Postman CLI can be used to validate API contracts during local development.
            link: https://postman.com
          two:
          three:
          four:      
      - name: IDE
        tip: 
        text: Developers kshould have access to governance linting via their chosen IDE as they are developing APIs locally. 
        tools:
          one:  
            name: VSCode
            description: This is the description.
            link: https://example.com
          two:
          three:
          four:      
  - name: Test
    tip: text
    type: technical
    elements:       
      - name: Quality Review
        tip: text
        text: A review of contract, performance and other tests, as well as documentation and mock servers can be conducted to help ensure a baseline of quality across teams, and the APIs they are developing.
        tools:
          one: 
            name: Postman
            description: Quality reviews can be conducted via private, partner, or public worksaces across teams.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Secure
    tip: text
    type: technical
    elements:       
      - name: Security Review  
        tip: text
        text: A review of each API being developed can be conducted by security teams, helping evaluate the decisions made by teams when it comes to security, and ensure there are no vulneraabilities as teh API is being deployed.
        tools:
          one: 
            name: Postman
            description: Security reviews can be conducted via private, partner, or public worksaces across teams.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Deploy
    tip: text
    type: technical
    elements:  
      - name: Errors
        tip: text
        text: Governance linting should be applied as part of the CI/CD pipeline when deploying an API, returning errors as part of the reporting and build failure to staging or production.
        tools:
          one: 
            name: Postman
            description: The Postman CLI provides linting errors as part of the CI/CD pipeline.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral is used to lint contracts.
          three:
          four:      
      - name: Warning       
        tip: text
        text: Governance linting should be applied as part of the CI/CD pipeline when deploying an API, returning warnings as part of the reporting, allowing teams to learn as they iterate upon their APIs.
        tools:
          one: 
            name: Postman
            description: The Postman CLI provides linting errors as part of the CI/CD pipeline.
            link: https://postman.com
          two: 
            name: Spectral
            description: Spectral is used to lint contracts.
          three:
          four:          
      - name: Policies
        tip: text
        text: Security, gateway, and other policies are applied as part of the CI/CD pipeline, ensuring that all policies are tested for, and in some cases automatically applied as part of the API deployment process.
        tools:
          one: 
            name: Postman
            description: Postman can be used to test and apply policies.
            link: https://postman.com
          two:  
            name: Collection
            description: Postman collections are used to define, test, and apply policies.
            link: https://postman.com
          three:
          four:      
  - name: Observe
    tip: text
    type: business
    elements:  
      - name: APM
        tip: text
        text: Governance test results can be fed into APM solutions, providing a way to report across the different aspects of governance for all APIs.
        tools:
          one:
            name: New Relic
            description: Each governance collection can be monitored and piped into New Relic.
            link: https://example.com    
          two:
          three:
          four:      
      - name: Reports
        tip: text
        text: Platform reporting shows information about how government rules are beinga pplied across teams and APIs, helping architects, product owners, and other roles see the impact of governance work.
        tools:
          one: 
            name: Postman
            description: Postman reporting allows you to see governance as it being applied across teams and APIs.
            link: https://postman.com
          two:
          three:
          four:      
  - name: Distribute
    tip: text
    type: business
    elements:  
      - name: Search
        tip: text
        text: Governance guidance, collections, and reporting should be discovable as part of operations, allowing stakeholders to understand the state of one or many APIs by engaging with operations.
        tools:
          one: 
            name: Postman
            description: Postman discovery allows you to find workspaces, APIs, collections, environments, and monitors for APIs.
            link: https://postman.com
          two:
          three:
          four:          

# The consumer side of the lifecycle
consumer:
  - name: Discover
    tip: text
    type: business
    elements:
      - name: Search
        tip: text
        text: Consumers should be able to search for APIs on the interfaces they are already using, allowing for discovery of API information in a manner relevant to their work.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: This is the description.
            link: https://example.com
          three:
          four:  
            name: Collection
            description: This is the description.
            link: https://example.com
      - name: Networks
        tip: text
        text: This is the text.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Teams
        tip: text
        text: The teams behind APIs, and any partner or public contributors, should be made discoverable alongside documentation and other data, encouraging engagement.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Workspaces
        tip: text
        text: Alongside Git repositories, you should include private, partner, and public workspaces as part of discovery, indexing the places where all work occurs for each API.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:
          three:
          four:      
      - name: APIs
        tip: text
        text: The contracts and other artifacts that define the surface area of an API, including authentication and authorization, should be discoverable as part of regular operations.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: This is the description.
            link: https://example.com
          three:
          four:      
      - name: Documentation
        tip: text
        text: Up-to-date and accurate documentation for all APIs should be easily discoverable by teams, with human-readable details describing what is possible with each API.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: This is the description.
            link: https://example.com
          three:
          four:      
      - name: Access  
        tip: text
        text: This APIs, documentation, and the operations around APIs should be accessible to targeted consumers, ensuring that access is handled consistently across all APis, and removes barriers to entry for all consumers.
        tools:
          one: 
            name: AWS API Gateway
            description: Theh AWS API Gateway is used to manage users, keys, plans, and APis made accessible via workspaces.
            link: https://example.com
          two:
          three:
          four:      
  - name: Evaluate
    tip: text
    type: business
    elements:
      - name: Explore
        tip: text
        text: Enable consumers to explore as much of the surface area of an API as possible, perhaps without even authenticating, so they can learn what is possible.
        tools:
          one: 
            name: Postman
            description: Reference and onboarding collections available via public, partner, and public workspaces help consumers explore APIs.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Documentation
        tip: text
        text: Provide rich documentation with useful descriptions, examples, and other information to help consumers get started using each API.
        tools:
          one: 
            name: Postman
            description: Postman collections can be used to publish documentation for APIs.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: Documentation can be generated using valid OpenAPI contracts for APis.
            link: https://example.com
          three:
          four:   
      - name: Examples
        tip: text
        text: Make sure there are always examples for each element of an API, allowing API contracts to be mocked and providing rich documentation showing how they work.
        tools:
          one: 
            name: Postman
            description: You can manage examples for APIs using Postman collections.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: Examples can be added to OpenAPI contracts as part of API builder.
            link: https://example.com
          three:
          four:               
      - name: Onboarding  
        tip: text
        text: It should be easy for a consumer to go from exploring to executing and integrating an API, making it as easy as possible to receive keys and understand how to make API requests. 
        tools:
          one: 
            name: Postman
            description: Postman network and workspaces make onboarding developers frictionless.
            link: https://postman.com
          two:  
            name: Collection
            description: Postman collections make it easier for consumers to onboard with APIs.
            link: https://example.com
          three:
          four:               
      - name: Execute  
        tip: text
        text: Provide the ability to execute each request, response, publish, and subscribe, making sure that learning about an API is as hands-on as it can possibly be. 
        tools:
          one: 
            name: Postman
            description: Postman provides an automated enviroment for working with APIs.
            link: https://postman.com
          two:  
            name: Collection
            description: Postman collections provide an executable unit of API value.
            link: https://example.com
          three:
          four:      
  - name: Integrate
    tip: text
    type: technical
    elements:     
      - name: Authentication
        tip: text
        text: The authentication with APIs for developers needs to be made as simple and standardized as possible using API keys, OAuth, and OpenID.
        tools:
          one: 
            name: Postman
            description: Postman helps manage the authentication across the API lifecycle for APIs.
            link: https://postman.com
          two: 
            name: AWS API Gateway
            description: The AWS API Gateway is used to issue keys, and manage authentication and logging for APis.
            link: https://example.com
          three:
          four:      
      - name: Capablities Collections
        tip: text
        text: Small modular collections can be made available for automating the integration of APIs, applying environments and making integrationi easier for developers.
        tools:
          one: 
            name: Postman
            description: Postman provides a modular way to integrate with APis.
            link: https://postman.com
          two:  
            name: Collection
            description: Collections can be defined for any single API-driven functionality.
            link: https://example.com
          three:
          four:      
      - name: Contracts
        tip: text
        text: Machine-readable contracts like OpenAPI and AsyncAPI make integration as simple as importing the contract for an API, authenticating, and  making the API calls you need to move data between systems, providing an artifact that defines consumption.
        tools:
          one: 
            name: Postman
            description: Postman can be used to manage the source of truth for contracts.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: OpenAPIs can be found in API builder and synced with repositories.
            link: https://example.com
          three:
          four: 
      - name: Client SDKs
        tip: text
        text: Software development kids in a variety of programming languages help minimize the time it takes for developers to integrate with an API in the language they are most familar with.
        tools:
          one: 
            name: Postman
            description: Postman autogenerates code snippets for you in a variety of languages.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: OpenAPI can be used to generated client SDKs as part of the build process.
            link: https://example.com
          three:
          four:                
      - name: Automation
        tip: text
        text: Take advantage of automation opportunities, allowing collections to be scheduled and baked into the CI/CD pipelines and common business capabilities to be executed. Business and technical stakeholders can do more with less through API automation.
        tools:
          one: 
            name: Postman
            description: Postman allows you to automate integration using CI/CD and monitors.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Workflows  
        tip: text
        text: Provide ready-to-go low-code and no-code options for executing common business workflows, allowing multiple internal, partner, and public APIs to be daisy-chained into solutions that will help business and technical stakeholders integrate better.
        tools:
          one: 
            name: Postman
            description: Postman allows you to build workflows across one or many APIs.
            link: https://postman.com
          two:  
            name: Collection
            description: Collections can be used to develop workflows for API integration.
            link: https://example.com
          three:
          four:      
  - name: Test
    tip: text
    type: technical
    elements:
      - name: Availability
        tip: text
        text: Share uptime and availability information with consumers on a dashboard, providing transparency around the operation of the platform they will depend on for their applications and helping provide a historical accounting of availability.
        tools:
          one: 
            name: Postman
            description: Postman can be used to monitor the uptime and availability of APIs.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Contract
        tip: text
        text: Exposing contract tests and even the results of scheduled contract test runs will increase consumer awareness of API contracts and how their validation can be used in applications and integrations.
        tools:
          one: 
            name: Postman
            description: API contracts can be made available to users via workspaces so they can test APIs.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: OpenAPI provides a machine readable contract between API producer and consumer.
            link: https://example.com
          three:
          four:  
            name: Collection
            description: Collections can be used to provide contract tests that consumers can run on their own.
            link: https://example.com     
      - name: Performance
        tip: text
        text: Share performance tests and results of scheduled performance test runs, increasing transparency about API performance while demonstrating how your platform has considered performance and is taking steps to improve upon it.
        tools:
          one: 
            name: Postman
            description: You can use Postman to understand the performance of APIs.
            link: https://postman.com
          two:  
            name: Collection
            description: Performance test collections can be provided to consumers for running.
            link: https://postman.com
          three:
          four:      
      - name: Security
        tip: text
        text: Share your overall security policy and security test results, creating trust with consumers. 
        tools:
          one: 
            name: Postman
            description: Postman workspaces can make security collections and reporting available to cosumers.
            link: https://postman.com
          two:  
            name: Collection
            description: You can provide security collections that consumers can execute on their own to understand security.
            link: https://example.com
          two:
          three:
          four:      
  - name: Deploy
    tip: text
    type: technical
    elements:
      - name: Source
        tip: text
        text: Place all manually developed or automatically generating client code in a repository, providing a source of truth for the code and for any artifacts that are needed to define the deployment and operation of any API integration.
        tools:
          one:  
            name: Github
            description: GitHub source control can be used to deploy API integrations.
            link: https://github.com
          two:
          three:
          four:      
      - name: CI/CD Pipelines
        tip: text
        text: Implement the continuous integration portion of CI/CD, automating how applications and integrations are deployed and, making the deployment of API integrations, applications, and other use cases something that is always repeatable.
        tools:
          one:  
            name: Github
            description: Github actions can be used to automate and make API deployment repeatable.
            link: https://github.com
          two:
          three:
          four:      
      - name: Collection
        tip: text
        text: Leverage a Postman collection as a modular, shareable, and executable definition of an application, stitching together many different API calls across internal and external API sources to apply digital resources and capabilities in a specific way.
        tools:
          one: 
            name: Postman
            description: Postman can be used to define and automate the integration of APIs.
            link: https://postman.com
          two:  
            name: Collection
            description: Collections can be used to autoamte the integration of many different APis.
            link: https://example.com
          three:
          four:      
      - name: Serverless
        tip: text
        text: Use serverless layers for deploying integrations, orchestrations, and automating API resources and capabilities, tapping into ephemeral compute to deploy integration code that accomplishes specific business outcomes.
        tools:
          one: 
            name: AWS Lambda
            description: AWS Lambda can be used as the serverless compute behind API operations.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Runners  
        tip: text
        text: Acknowledge that some collection applications will be manually run by different team members using runners, organizing different types of integrations and applications by workspaces and letting different stakeholders manually put them to work.
        tools:
          one: 
            name: Postman
            description: You can organize teams and workspaces by domain or group using Postman.
            link: https://postman.com
          two:  
            name: Collection
            description: This is the description.
            link: https://example.com
          three:
          four:      
  - name: Observe 
    tip: text
    type: technical
    elements:
      - name: Usage
        tip: text
        text: A consumers uage of an API should always be made available to consumers so they can always be understand of how they are putting resources to work.
        tools:
          one:
            name: AWS API Gateway
            description: AWS API Gateway is used to understand and report upon the usage of APIs by consumer.
            link: https://example.com          
          two:
          three:
          four:      
      - name: Watches
        tip: text
        text: Keeping track of the watches on workspaces, APIs, and collections to understand who is tuned into what is happening. Use watches as a metric for the number of consumers, contributors, and internal and external stakeholders who are tuned in.
        tools:
          one: 
            name: Postman
            description: Postman provides the ability to watch APIs and elements of operations.
            link: https://postman.com
          two:  
            name: OpenAPI
            description: Consumers can watch OpenAPI contracts that are made available to consumers.
            link: https://example.com
          three:
          four:  
            name: Collection
            description: Consumers can watch collections that are made available to consumers.
            link: https://example.com
      - name: Forks
        tip: text
        text: Track who is forking repositories and collections, using the fork count as a metric for engagement and knowing who your consumers are. Track engagement via workspaces, repositories, and collections to learn how consumers are using your APIs.
        tools:
          one: 
            name: Postman
            description: Postmans allow for forking of collections used to define API operations.
            link: https://postman.com
          two:  
            name: Collection
            description: Each collection can be forked and submit pull requests to make changes.
            link: https://example.com
          three:
          four:      
      - name: Feedback
        tip: text
        text: Engage with API producers and consumers, understanding the conversation is around each API or group of APIs. Observe discussions about digital resources and capabilities.
        tools:
          one:  
            name: Github
            description: This is the description.
            link: https://example.com
          two:  
            name: OpenAPI
            description: This is the description.
            link: https://example.com
          three:
          four:  
            name: Collection
            description: This is the description.
            link: https://example.com      
      - name: Monitors
        tip: text
        text: Monitors can be used by consumers to monitor uptime, contracts, performance, and security of the APIs that they are depending on.
        tools:
          one: 
            name: Postman
            description: Postman enables consumer to setup monitors on any APIs they are consumering.
            link: https://postman.com
          two:
          three:
          four:      
      - name: Notifications  
        tip: text
        text: Use in-app, email, or SMS notifications to engage with a platform and keep consumers part of the forward motion of an API, collecting metrics for observability.
        tools:
          one: 
            name: Postman
            description: Postman provides notifications regarding the APIs consumers are watching.
            link: https://postman.com
          two:
          three:
          four:      